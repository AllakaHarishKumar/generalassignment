//first question solution

const express = require('express')
const mysql = require('mysql')
const bodyParser = require('body-parser')
const app = express()

// Configure middleware
app.use(bodyParser.json())

// Create MySQL connection pool
const pool = mysql.createPool({
  host: 'localhost',
  user: 'your_username',
  password: 'your_password',
  database: 'your_database',
})

// API route for adding a customer
app.post('/api/customers', (req, res) => {
  try {
    const {name, phoneNumber} = req.body

    // Validate input parameters
    if (!name || !phoneNumber) {
      return res.status(400).json({error: 'Invalid input parameters'})
    }

    // Create a transaction connection
    pool.getConnection((err, connection) => {
      if (err) {
        console.error('Error getting connection from pool:', err)
        return res.status(500).json({error: 'Internal server error'})
      }

      // Begin the transaction
      connection.beginTransaction(err => {
        if (err) {
          console.error('Error beginning transaction:', err)
          connection.release()
          return res.status(500).json({error: 'Internal server error'})
        }

        // Check for duplicate phone numbers
        connection.query(
          'SELECT * FROM customers WHERE phoneNumber = ?',
          [phoneNumber],
          (err, results) => {
            if (err) {
              console.error('Error checking for duplicates:', err)
              connection.rollback(() => {
                connection.release()
                return res.status(500).json({error: 'Internal server error'})
              })
            }

            if (results.length > 0) {
              connection.rollback(() => {
                connection.release()
                return res
                  .status(409)
                  .json({error: 'Phone number already exists'})
              })
            } else {
              // Insert the customer into the database
              connection.query(
                'INSERT INTO customers (name, phoneNumber) VALUES (?, ?)',
                [name, phoneNumber],
                (err, result) => {
                  if (err) {
                    console.error('Error inserting customer:', err)
                    connection.rollback(() => {
                      connection.release()
                      return res
                        .status(500)
                        .json({error: 'Internal server error'})
                    })
                  }

                  // Commit the transaction
                  connection.commit(err => {
                    if (err) {
                      console.error('Error committing transaction:', err)
                      connection.rollback(() => {
                        connection.release()
                        return res
                          .status(500)
                          .json({error: 'Internal server error'})
                      })
                    }

                    // Log the customer addition
                    console.log(
                      `Added customer: ${name}, Phone number: ${phoneNumber}`,
                    )

                    // Release the connection
                    connection.release()

                    // Return the success response
                    return res
                      .status(200)
                      .json({message: 'Customer added successfully'})
                  })
                },
              )
            }
          },
        )
      })
    })
  } catch (err) {
    console.error('Error adding customer:', err)
    return res.status(500).json({error: 'Internal server error'})
  }
})

// Start the server
app.listen(3000, () => {
  console.log('Server is running on port 3000')
})
